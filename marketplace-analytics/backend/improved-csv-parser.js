const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

class ImprovedCSVParser {
  constructor() {
    this.prisma = new PrismaClient();
  }

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä CSV —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–≤—ã—á–µ–∫
  parseCSV(content) {
    const lines = content.split('\n');
    const headers = this.parseCSVLine(lines[0]);
    const data = [];
    
    let i = 1;
    while (i < lines.length) {
      if (!lines[i].trim()) {
        i++;
        continue;
      }
      
      const { row, nextIndex } = this.parseCSVRow(lines, i, headers.length);
      if (row) {
        const rowObject = {};
        headers.forEach((header, index) => {
          rowObject[header.trim()] = row[index] || '';
        });
        data.push(rowObject);
      }
      i = nextIndex;
    }
    
    return { data, headers };
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ CSV —Å —É—á–µ—Ç–æ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –ø–æ–ª–µ–π
  parseCSVRow(lines, startIndex, expectedFields) {
    let currentLine = startIndex;
    let combinedLine = lines[currentLine];
    let fields = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ (–≤—Å–µ –∫–∞–≤—ã—á–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã)
    while (currentLine < lines.length && !this.isRowComplete(combinedLine, expectedFields)) {
      currentLine++;
      if (currentLine < lines.length) {
        combinedLine += '\n' + lines[currentLine];
      }
    }
    
    try {
      fields = this.parseCSVLine(combinedLine);
      
      // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
      if (fields.length !== expectedFields) {
        console.log(`‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª–µ–π: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedFields}, –ø–æ–ª—É—á–µ–Ω–æ ${fields.length}`);
        console.log(`–°—Ç—Ä–æ–∫–∞: ${combinedLine.substring(0, 100)}...`);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        fields = this.repairCSVLine(combinedLine, expectedFields);
      }
      
      return { row: fields, nextIndex: currentLine + 1 };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${startIndex + 1}: ${error.message}`);
      return { row: null, nextIndex: startIndex + 1 };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏
  isRowComplete(line, expectedFields) {
    const fields = this.parseCSVLine(line);
    return fields.length >= expectedFields;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ CSV
  parseCSVLine(line) {
    const fields = [];
    let current = '';
    let inQuotes = false;
    let i = 0;
    
    while (i < line.length) {
      const char = line[i];
      const nextChar = line[i + 1];
      
      if (char === '"') {
        if (inQuotes) {
          if (nextChar === '"') {
            // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞–≤—ã—á–∫–∞
            current += '"';
            i += 2;
            continue;
          } else {
            // –ö–æ–Ω–µ—Ü –ø–æ–ª—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö
            inQuotes = false;
          }
        } else {
          // –ù–∞—á–∞–ª–æ –ø–æ–ª—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö
          inQuotes = true;
        }
      } else if (char === ',' && !inQuotes) {
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–ª–µ–π
        fields.push(current.trim());
        current = '';
        i++;
        continue;
      } else {
        current += char;
      }
      
      i++;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ
    fields.push(current.trim());
    
    return fields;
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ CSV
  repairCSVLine(line, expectedFields) {
    console.log('üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏...');
    
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—è —Å–ª–∏–ª–∏—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç—å
    let fields = this.parseCSVLine(line);
    
    if (fields.length < expectedFields) {
      // –ò—â–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ —Å–ª–∏—Ç—å—Å—è
      for (let i = 0; i < fields.length; i++) {
        const field = fields[i];
        
        // –ï—Å–ª–∏ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏
        if (/^\d+,\d+/.test(field)) {
          const parts = field.split(',');
          fields.splice(i, 1, ...parts);
          break;
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É –≤ –Ω–∞—á–∞–ª–µ
        if (/^\d{2}\.\d{2}\.\d{4}/.test(field)) {
          const match = field.match(/^(\d{2}\.\d{2}\.\d{4}),(.+)/);
          if (match) {
            fields.splice(i, 1, match[1], match[2]);
            break;
          }
        }
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ
    while (fields.length < expectedFields) {
      fields.push('');
    }
    
    // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª–µ–π, –æ–±—Ä–µ–∑–∞–µ–º
    if (fields.length > expectedFields) {
      fields = fields.slice(0, expectedFields);
    }
    
    return fields;
  }

  // –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
  cleanProductName(name) {
    if (!name) return '';
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    let cleaned = name.replace(/^""|""$/g, '').replace(/""/g, '"');
    
    // –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ CSV –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ü–µ
    cleaned = cleaned.replace(/,\d+,\d+,[\d,]+$/g, '');
    
    // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = cleaned.replace(/\n/g, ' ').replace(/\s+/g, ' ').trim();
    
    return cleaned;
  }

  async processFile(reportId, filePath, marketplace) {
    try {
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
      console.log(`üìä –û—Ç—á–µ—Ç ID: ${reportId}`);
      console.log(`üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${marketplace}`);
      
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      const fileContent = fs.readFileSync(filePath, 'utf8');
      console.log(`üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      // –ü–∞—Ä—Å–∏–º CSV —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º
      const { data, headers } = this.parseCSV(fileContent);
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${data.length}`);
      console.log(`üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${headers.join(', ')}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
      if (data.length > 0) {
        console.log('\nüìù –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:');
        data.slice(0, 3).forEach((row, index) => {
          console.log(`  –°—Ç—Ä–æ–∫–∞ ${index + 1}:`);
          Object.entries(row).forEach(([key, value]) => {
            console.log(`    ${key}: ${value}`);
          });
          console.log('');
        });
      }
      
      // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
      const salesData = [];
      let processedCount = 0;
      let errorCount = 0;
      
      for (let i = 0; i < data.length; i++) {
        const row = data[i];
        console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i + 1}/${data.length}:`);
        console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(row)}`);
        
        try {
          if (marketplace === 'OZON') {
            const mappedRow = await this.mapOzonRow(row, reportId);
            if (mappedRow) {
              console.log(`  ‚úÖ –ú–∞–ø–ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: ${JSON.stringify({
                sku: mappedRow.sku,
                productName: mappedRow.productName,
                saleDate: mappedRow.saleDate,
                quantity: mappedRow.quantity,
                price: mappedRow.price,
                commission: mappedRow.commission
              })}`);
              
              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
              const analytics = this.calculateAnalytics(mappedRow, marketplace);
              const finalRow = { ...mappedRow, ...analytics };
              
              console.log(`  üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: ${JSON.stringify(finalRow)}`);
              
              salesData.push(finalRow);
              processedCount++;
              console.log(`  ‚úÖ –°—Ç—Ä–æ–∫–∞ ${i + 1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
            } else {
              console.log(`  ‚ùå –°—Ç—Ä–æ–∫–∞ ${i + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
              errorCount++;
            }
          }
        } catch (error) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i + 1}: ${error.message}`);
          errorCount++;
        }
      }
      
      console.log(`\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${processedCount}, –æ—à–∏–±–æ–∫: ${errorCount}`);
      
      if (salesData.length > 0) {
        await this.saveToDatabase(reportId, salesData);
        
        const totalRevenue = salesData.reduce((sum, item) => sum + item.revenue, 0);
        const totalProfit = salesData.reduce((sum, item) => sum + item.netProfit, 0);
        const profitMargin = totalRevenue > 0 ? (totalProfit / totalRevenue) * 100 : 0;
        
        console.log(`üí∞ –í—ã—Ä—É—á–∫–∞: ${totalRevenue}‚ÇΩ, –ü—Ä–∏–±—ã–ª—å: ${totalProfit}‚ÇΩ, –ú–∞—Ä–∂–∞: ${profitMargin.toFixed(2)}%`);
        console.log(`‚úÖ –§–∞–π–ª ${path.basename(filePath)} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
      }
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      throw error;
    }
  }

  async mapOzonRow(row, reportId) {
    const dateStr = row['–î–∞—Ç–∞'];
    const sku = row['–ê—Ä—Ç–∏–∫—É–ª'];
    let productName = row['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'];
    const price = parseFloat(row['–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É']) || 0;
    const quantity = parseInt(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']) || 0;
    const commission = parseFloat(row['–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—Ä–æ–¥–∞–∂—É']) || 0;
    
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    productName = this.cleanProductName(productName);
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã DD.MM.YYYY
    const dateParts = dateStr.split('.');
    if (dateParts.length === 3) {
      const day = parseInt(dateParts[0]);
      const month = parseInt(dateParts[1]);
      const year = parseInt(dateParts[2]);
      const saleDate = new Date(year, month - 1, day);
      
      if (!isNaN(saleDate.getTime()) && sku && productName && price > 0 && quantity > 0) {
        return {
          reportId,
          sku: sku.toString(),
          productName: productName.toString(),
          saleDate,
          quantity,
          price,
          commission,
        };
      }
    }
    
    return null;
  }

  calculateAnalytics(row, marketplace) {
    const revenue = row.price * row.quantity;
    
    // –ö–æ–º–∏—Å—Å–∏–∏ –∏ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è Ozon
    let logistics = 0;
    let storage = 0;
    let totalCommission = row.commission;
    
    if (marketplace === 'OZON') {
      logistics = revenue * 0.035; // 3.5%
      storage = revenue * 0.02;   // 2%
      totalCommission = revenue * 0.08; // 8% –±–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è Ozon
    }
    
    const netProfit = revenue - totalCommission - logistics - storage;
    const profitMargin = revenue > 0 ? (netProfit / revenue) * 100 : 0;
    
    return {
      revenue,
      netProfit,
      profitMargin,
      commission: totalCommission,
      logistics,
      storage,
    };
  }

  async saveToDatabase(reportId, salesData) {
    console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    await this.prisma.salesData.deleteMany({
      where: { reportId }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await this.prisma.salesData.createMany({
      data: salesData
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    const totalRevenue = salesData.reduce((sum, item) => sum + item.revenue, 0);
    const totalProfit = salesData.reduce((sum, item) => sum + item.netProfit, 0);
    const profitMargin = totalRevenue > 0 ? (totalProfit / totalRevenue) * 100 : 0;
    
    await this.prisma.report.update({
      where: { id: reportId },
      data: {
        processed: true,
        totalRevenue,
        totalProfit,
        profitMargin,
      },
    });
  }

  async disconnect() {
    await this.prisma.$disconnect();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async function processSpecificFile(filePath, marketplace = 'OZON') {
  const parser = new ImprovedCSVParser();
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    const reportId = 'test-' + Date.now();
    await parser.processFile(reportId, filePath, marketplace);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
  } finally {
    await parser.disconnect();
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const filePath = process.argv[2];
  if (!filePath) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node improved-csv-parser.js <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>');
    process.exit(1);
  }
  
  processSpecificFile(filePath);
}

module.exports = { ImprovedCSVParser };