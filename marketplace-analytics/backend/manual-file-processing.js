const { PrismaClient } = require('@prisma/client');
const Papa = require('papaparse');
const fs = require('fs');
const path = require('path');

// –£–ª—É—á—à–µ–Ω–Ω—ã–π CSV –ø–∞—Ä—Å–µ—Ä
class ImprovedCSVParser {
  parseCSV(content) {
    const lines = content.split('\n');
    const headers = this.parseCSVLine(lines[0]);
    const data = [];
    
    let i = 1;
    while (i < lines.length) {
      if (!lines[i].trim()) {
        i++;
        continue;
      }
      
      const { row, nextIndex } = this.parseCSVRow(lines, i, headers.length);
      if (row) {
        const rowObject = {};
        headers.forEach((header, index) => {
          rowObject[header.trim()] = row[index] || '';
        });
        data.push(rowObject);
      }
      i = nextIndex;
    }
    
    return { data, headers };
  }

  parseCSVRow(lines, startIndex, expectedFields) {
    let currentLine = startIndex;
    let combinedLine = lines[currentLine];
    
    while (currentLine < lines.length && !this.isRowComplete(combinedLine, expectedFields)) {
      currentLine++;
      if (currentLine < lines.length) {
        combinedLine += '\n' + lines[currentLine];
      }
    }
    
    try {
      let fields = this.parseCSVLine(combinedLine);
      
      if (fields.length !== expectedFields) {
        console.log(`‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª–µ–π: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedFields}, –ø–æ–ª—É—á–µ–Ω–æ ${fields.length}`);
        fields = this.repairCSVLine(combinedLine, expectedFields);
      }
      
      return { row: fields, nextIndex: currentLine + 1 };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${startIndex + 1}: ${error.message}`);
      return { row: null, nextIndex: startIndex + 1 };
    }
  }

  isRowComplete(line, expectedFields) {
    try {
      const fields = this.parseCSVLine(line);
      return fields.length >= expectedFields;
    } catch (error) {
      return false;
    }
  }

  parseCSVLine(line) {
    const fields = [];
    let current = '';
    let inQuotes = false;
    let i = 0;
    
    while (i < line.length) {
      const char = line[i];
      const nextChar = line[i + 1];
      
      if (char === '"') {
        if (inQuotes) {
          if (nextChar === '"') {
            current += '"';
            i += 2;
            continue;
          } else {
            inQuotes = false;
          }
        } else {
          inQuotes = true;
        }
      } else if (char === ',' && !inQuotes) {
        fields.push(current.trim());
        current = '';
        i++;
        continue;
      } else {
        current += char;
      }
      i++;
    }
    
    fields.push(current.trim());
    return fields;
  }

  repairCSVLine(line, expectedFields) {
    console.log('üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏...');
    
    if (line.includes('\n')) {
      console.log('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏');
      return this.splitMultipleRows(line, expectedFields);
    }
    
    let fields = this.parseCSVLine(line);
    
    if (fields.length < expectedFields) {
      for (let i = 0; i < fields.length; i++) {
        const field = fields[i];
        const dataPattern = /^(.+?),(\d+),(\d+),(\d+),(\d+),(\d+)$/;
        const match = field.match(dataPattern);
        if (match) {
          console.log(`üéØ –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
          const cleanName = match[1].replace(/"/g, '');
          fields.splice(i, 1, cleanName, match[2], match[3], match[4], match[5], match[6]);
          break;
        }
      }
    }
    
    while (fields.length < expectedFields) {
      fields.push('');
    }
    
    if (fields.length > expectedFields) {
      fields = fields.slice(0, expectedFields);
    }
    
    return fields;
  }

  splitMultipleRows(combinedLine, expectedFields) {
    console.log('üîÄ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏');
    
    const datePattern = /(\d{2}\.\d{2}\.\d{4})/g;
    const dates = [];
    let match;
    
    while ((match = datePattern.exec(combinedLine)) !== null) {
      dates.push({
        date: match[1],
        index: match.index
      });
    }
    
    if (dates.length > 1) {
      const rows = [];
      for (let i = 0; i < dates.length; i++) {
        const startIndex = dates[i].index;
        const endIndex = i < dates.length - 1 ? dates[i + 1].index : combinedLine.length;
        const rowData = combinedLine.substring(startIndex, endIndex).trim();
        
        if (rowData) {
          const cleanRow = rowData.replace(/\n/g, ',').replace(/,+/g, ',').replace(/^,|,$/g, '');
          rows.push(cleanRow);
        }
      }
      
      if (rows.length > 0) {
        let firstRowFields = this.parseCSVLine(rows[0]);
        
        if (firstRowFields.length < expectedFields) {
          for (let i = 0; i < firstRowFields.length; i++) {
            const field = firstRowFields[i];
            const dataPattern = /^(.+?),(\d+),(\d+),(\d+),(\d+),(\d+)$/;
            const match = field.match(dataPattern);
            if (match) {
              console.log(`üéØ –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ`);
              const cleanName = match[1].replace(/"/g, '');
              firstRowFields.splice(i, 1, cleanName, match[2], match[3], match[4], match[5], match[6]);
              break;
            }
          }
        }
        
        while (firstRowFields.length < expectedFields) {
          firstRowFields.push('');
        }
        
        return firstRowFields.slice(0, expectedFields);
      }
    }
    
    const fields = this.parseCSVLine(combinedLine);
    while (fields.length < expectedFields) {
      fields.push('');
    }
    return fields.slice(0, expectedFields);
  }

  cleanProductName(name) {
    if (!name) return '';
    let cleaned = name.replace(/^""|""$/g, '').replace(/""/g, '"');
    cleaned = cleaned.replace(/,\d+,\d+,[\d,]+$/g, '');
    cleaned = cleaned.replace(/\n/g, ' ').replace(/\s+/g, ' ').trim();
    return cleaned;
  }
}

async function processFile(reportId, filePath, marketplace) {
  const prisma = new PrismaClient();
  
  try {
    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
    console.log(`üìä –û—Ç—á–µ—Ç ID: ${reportId}`);
    console.log(`üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${marketplace}`);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const fileContent = fs.readFileSync(filePath, 'utf8');
    console.log(`üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –ü–∞—Ä—Å–∏–º CSV —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º
    const csvParser = new ImprovedCSVParser();
    const parsed = csvParser.parseCSV(fileContent);
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${parsed.data.length}`);
    console.log(`üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${parsed.headers.join(', ')}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
    if (parsed.data.length > 0) {
      console.log('\nüìù –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:');
      parsed.data.slice(0, 3).forEach((row, index) => {
        console.log(`  –°—Ç—Ä–æ–∫–∞ ${index + 1}:`);
        Object.entries(row).forEach(([key, value]) => {
          console.log(`    ${key}: ${value}`);
        });
        console.log('');
      });
    }
    
    // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    const salesData = [];
    let processedCount = 0;
    let errorCount = 0;
    
    for (const row of parsed.data) {
      try {
        let mappedRow;
        
        if (marketplace === 'OZON') {
          // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è Ozon
          const dateStr = row['–î–∞—Ç–∞'];
          const sku = row['–ê—Ä—Ç–∏–∫—É–ª'];
          let productName = row['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'];
          const price = parseFloat(row['–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É']) || 0;
          const quantity = parseInt(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']) || 0;
          const commission = parseFloat(row['–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—Ä–æ–¥–∞–∂—É']) || 0;
          
          // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
          productName = csvParser.cleanProductName(productName);
          
          // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã DD.MM.YYYY
          const dateParts = dateStr.split('.');
          if (dateParts.length === 3) {
            const day = parseInt(dateParts[0]);
            const month = parseInt(dateParts[1]);
            const year = parseInt(dateParts[2]);
            const saleDate = new Date(year, month - 1, day);
            
            if (!isNaN(saleDate.getTime()) && sku && productName && price > 0 && quantity > 0) {
              const revenue = price * quantity;
              const netProfit = revenue - commission;
              const profitMargin = revenue > 0 ? (netProfit / revenue) * 100 : 0;
              
              mappedRow = {
                reportId,
                sku: sku.toString(),
                productName: productName.toString(),
                saleDate,
                quantity,
                price,
                revenue,
                netProfit,
                profitMargin,
                commission,
                logistics: revenue * 0.035, // 3.5% –¥–ª—è Ozon
                storage: revenue * 0.02, // 2% –¥–ª—è Ozon
              };
              
              salesData.push(mappedRow);
              processedCount++;
            } else {
              console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${JSON.stringify(row)}`);
              errorCount++;
            }
          } else {
            console.log(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: ${dateStr}`);
            errorCount++;
          }
        } else if (marketplace === 'WILDBERRIES') {
          // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è Wildberries (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
          console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ Wildberries —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–º —Å–∫—Ä–∏–ø—Ç–µ');
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${processedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${errorCount}`);
    
    if (salesData.length > 0) {
      console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      await prisma.salesData.deleteMany({
        where: { reportId }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      await prisma.salesData.createMany({
        data: salesData
      });
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
      const totalRevenue = salesData.reduce((sum, item) => sum + item.revenue, 0);
      const totalProfit = salesData.reduce((sum, item) => sum + item.netProfit, 0);
      const profitMargin = totalRevenue > 0 ? (totalProfit / totalRevenue) * 100 : 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
      await prisma.report.update({
        where: { id: reportId },
        data: {
          processed: true,
          totalRevenue,
          totalProfit,
          profitMargin,
        },
      });
      
      console.log(`üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenue.toFixed(2)}‚ÇΩ`);
      console.log(`üíµ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${totalProfit.toFixed(2)}‚ÇΩ`);
      console.log(`üìà –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${profitMargin.toFixed(2)}%`);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    } else {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

async function processAllFiles() {
  const prisma = new PrismaClient();
  
  try {
    const reports = await prisma.report.findMany({
      where: {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –æ—Ç—á–µ—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
        salesData: {
          none: {}
        }
      }
    });
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${reports.length}`);
    
    for (const report of reports) {
      const uploadDir = process.env.UPLOAD_DEST || './uploads';
      const filePath = path.join(uploadDir, `${report.id}_${report.fileName}`);
      
      if (fs.existsSync(filePath)) {
        console.log(`\n${'='.repeat(50)}`);
        await processFile(report.id, filePath, report.marketplace);
      } else {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      }
    }
    
    console.log('\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
processAllFiles();