const { PrismaClient } = require('@prisma/client');
const path = require('path');
const fs = require('fs');

async function testFileProcessing() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã
    const reports = await prisma.report.findMany({
      include: {
        _count: {
          select: { salesData: true }
        }
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${reports.length}`);
    
    reports.forEach((report, index) => {
      console.log(`\nüìÑ –û—Ç—á–µ—Ç ${index + 1}:`);
      console.log(`  - ID: ${report.id}`);
      console.log(`  - –§–∞–π–ª: ${report.fileName}`);
      console.log(`  - –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: ${report.marketplace}`);
      console.log(`  - –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${report.processed ? '‚úÖ' : '‚ùå'}`);
      console.log(`  - –ó–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥–∞–∂: ${report._count.salesData}`);
      console.log(`  - –í—ã—Ä—É—á–∫–∞: ${report.totalRevenue || '–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞'}`);
      console.log(`  - –ü—Ä–∏–±—ã–ª—å: ${report.totalProfit || '–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      const uploadDir = process.env.UPLOAD_DEST || './uploads';
      const filePath = path.join(uploadDir, `${report.id}_${report.fileName}`);
      const fileExists = fs.existsSync(filePath);
      console.log(`  - –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fileExists ? '‚úÖ' : '‚ùå'} (${filePath})`);
      
      if (fileExists) {
        const stats = fs.statSync(filePath);
        console.log(`  - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${stats.size} –±–∞–π—Ç`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂
    const salesData = await prisma.salesData.findMany();
    console.log(`\nüí∞ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥–∞–∂: ${salesData.length}`);
    
    if (salesData.length > 0) {
      console.log('\nüìà –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–¥–∞–∂:');
      salesData.slice(0, 3).forEach((sale, index) => {
        console.log(`  ${index + 1}. ${sale.productName} (${sale.sku}) - ${sale.revenue}‚ÇΩ`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ uploads –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const uploadDir = process.env.UPLOAD_DEST || './uploads';
    if (fs.existsSync(uploadDir)) {
      const files = fs.readdirSync(uploadDir);
      console.log(`\nüìÅ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads: ${files.length}`);
      files.forEach(file => {
        const filePath = path.join(uploadDir, file);
        const stats = fs.statSync(filePath);
        console.log(`  - ${file} (${stats.size} –±–∞–π—Ç)`);
      });
    } else {
      console.log(`\n‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${uploadDir}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testFileProcessing();